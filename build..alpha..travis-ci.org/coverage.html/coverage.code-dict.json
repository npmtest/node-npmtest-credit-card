{"/home/travis/build/npmtest/node-npmtest-credit-card/test.js":"/* istanbul instrument in package npmtest_credit_card */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-credit-card/lib.npmtest_credit_card.js":"/* istanbul instrument in package npmtest_credit_card */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_credit_card = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_credit_card = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-credit-card/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-credit-card && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_credit_card */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_credit_card\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_credit_card.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_credit_card.rollup.js'] =\n            local.assetsDict['/assets.npmtest_credit_card.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_credit_card.__dirname +\n                    '/lib.npmtest_credit_card.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-credit-card/node_modules/credit-card/lib/index.js":"'use strict';\nconst Reach = require('reach');\nconst Merge = require('lodash.merge');\n\nlet _defaults = {\n  cardTypes: {\n    VISA: {\n      cardType: 'VISA',\n      cardPattern: /^4[0-9]{12}(?:[0-9]{3})?$/,\n      partialPattern: /^4/,\n      cvvPattern: /^\\d{3}$/\n    },\n    MASTERCARD: {\n      cardType: 'MASTERCARD',\n      cardPattern: /^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}$/,\n      partialPattern: /^(?:5[1-5]|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)/,\n      cvvPattern: /^\\d{3}$/\n    },\n    AMERICANEXPRESS: {\n      cardType: 'AMERICANEXPRESS',\n      cardPattern: /^3[47][0-9]{13}$/,\n      partialPattern: /^3[47]/,\n      cvvPattern: /^\\d{4}$/\n    },\n    DINERSCLUB: {\n      cardType: 'DINERSCLUB',\n      cardPattern: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n      partialPattern: /^3(0[0-5]|[68])/,\n      cvvPattern: /^\\d{3}$/\n    },\n    DISCOVER: {\n      cardType: 'DISCOVER',\n      cardPattern: /^6(?:011|5[0-9]{2})[0-9]{12}$/,\n      partialPattern: /^6(011|5[0-9])/,\n      cvvPattern: /^\\d{3}$/\n    },\n    JCB: {\n      cardType: 'JCB',\n      cardPattern: /^(?:2131|1800|35\\d{3})\\d{11}$/,\n      partialPattern: /^(2131|1800|35)/,\n      cvvPattern: /^\\d{3}$/\n    }\n  },\n  expiryMonths: {\n    min: 1,\n    max: 12\n  },\n  expiryYears: {\n    min: 1900,\n    max: 2200\n  },\n  schema: {\n    cardType: 'cardType',\n    number: 'number',\n    expiryMonth: 'expiryMonth',\n    expiryYear: 'expiryYear',\n    cvv: 'cvv'\n  }\n};\n\n// Setup Aliases\n_setupCardTypeAliases('VISA', ['vc', 'VC', 'visa']);\n_setupCardTypeAliases('MASTERCARD', ['mc', 'MC', 'mastercard', 'master card', 'MASTER CARD']);\n_setupCardTypeAliases('AMERICANEXPRESS', ['ae', 'AE', 'ax', 'AX', 'amex', 'AMEX', 'american express', 'AMERICAN EXPRESS']);\n_setupCardTypeAliases('DINERSCLUB', ['dinersclub']);\n_setupCardTypeAliases('DISCOVER', ['dc', 'DC', 'discover']);\n_setupCardTypeAliases('JCB', ['jcb']);\n\n// Store original defaults. This must happen after aliases are setup\nconst _originalDefaults = Merge({}, _defaults);\n\nfunction validate (card, options) {\n  card = card || {};\n\n  const settings = Merge({}, _defaults, options);\n  const schema = settings.schema;\n  const cardType = Reach(card, schema.cardType);\n  const number = sanitizeNumberString(Reach(card, schema.number));\n  const expiryMonth = Reach(card, schema.expiryMonth);\n  const expiryYear = Reach(card, schema.expiryYear);\n  const cvv = sanitizeNumberString(Reach(card, schema.cvv));\n  const customValidationFn = settings.customValidation;\n  let customValidation;\n\n  // Optional custom validation\n  if (typeof customValidationFn === 'function') {\n    customValidation = customValidationFn(card, settings);\n  }\n\n  return {\n    card,\n    validCardNumber: isValidCardNumber(number, cardType, settings.cardTypes),\n    validExpiryMonth: isValidExpiryMonth(expiryMonth, settings.expiryMonths),\n    validExpiryYear: isValidExpiryYear(expiryYear, settings.expiryYears),\n    validCvv: doesCvvMatchType(cvv, cardType, settings.cardTypes),\n    isExpired: isExpired(expiryMonth, expiryYear),\n    customValidation\n  };\n}\n\nfunction determineCardType (number, options) {\n  const settings = Merge({}, _defaults, options);\n  const cardTypes = settings.cardTypes;\n  const keys = Object.keys(cardTypes);\n\n  number = sanitizeNumberString(number);\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    const type = cardTypes[key];\n\n    if (type.cardPattern.test(number) ||\n        (settings.allowPartial === true && type.partialPattern.test(number))) {\n      return type.cardType;\n    }\n  }\n\n  return null;\n}\n\nfunction isValidCardNumber (number, type, options) {\n  return doesNumberMatchType(number, type, options) && luhn(number);\n}\n\nfunction isValidExpiryMonth (month, options) {\n  const settings = Merge({}, _defaults.expiryMonths, options);\n\n  if (typeof month === 'string' && month.length > 2) {\n    return false;\n  }\n\n  month = ~~month;\n  return month >= settings.min && month <= settings.max;\n}\n\nfunction isValidExpiryYear (year, options) {\n  const settings = Merge({}, _defaults.expiryYears, options);\n\n  if (typeof year === 'string' && year.length !== 4) {\n    return false;\n  }\n\n  year = ~~year;\n  return year >= settings.min && year <= settings.max;\n}\n\nfunction doesNumberMatchType (number, type, options) {\n  const settings = Merge({}, _defaults.cardTypes, options);\n  const patterns = settings[type];\n\n  if (!patterns) {\n    return false;\n  }\n\n  return patterns.cardPattern.test(number);\n}\n\nfunction doesCvvMatchType (number, type, options) {\n  const settings = Merge({}, _defaults.cardTypes, options);\n  const patterns = settings[type];\n\n  if (!patterns) {\n    return false;\n  }\n\n  return patterns.cvvPattern.test(number);\n}\n\nfunction isExpired (month, year) {\n  month = ~~month;\n  year = ~~year;\n\n  // Cards are good until the end of the month\n  // http://stackoverflow.com/questions/54037/credit-card-expiration-dates-inclusive-or-exclusive\n  const expiration = new Date(year, month);\n\n  return Date.now() >= expiration;\n}\n\nfunction luhn (number) {\n  // Source - https://gist.github.com/DiegoSalazar/4075533\n\n  if (/[^\\d]+/.test(number) || typeof number !== 'string' || !number) {\n    return false;\n  }\n\n  let nCheck = 0;\n  let bEven = false;\n  let nDigit;\n\n  for (let i = number.length - 1; i >= 0; --i) {\n    nDigit = ~~number.charAt(i);\n\n    if (bEven) {\n      if ((nDigit *= 2) > 9) {\n        nDigit -= 9;\n      }\n    }\n\n    nCheck += nDigit;\n    bEven = !bEven;\n  }\n\n  return (nCheck % 10) === 0;\n}\n\nfunction sanitizeNumberString (number) {\n  if (typeof number !== 'string') {\n    return '';\n  }\n\n  return number.replace(/[^\\d]/g, '');\n}\n\nfunction defaults (options, overwrite) {\n  options = options || {};\n\n  if (overwrite === true) {\n    _defaults = Merge({}, options);\n  } else {\n    _defaults = Merge({}, _defaults, options);\n  }\n\n  return _defaults;\n}\n\nfunction reset () {\n  _defaults = Merge({}, _originalDefaults);\n  return _defaults;\n}\n\nfunction _setupCardTypeAliases (type, aliases) {\n  for (let i = 0; i < aliases.length; ++i) {\n    _defaults.cardTypes[aliases[i]] = _defaults.cardTypes[type];\n  }\n}\n\nmodule.exports = {\n  validate,\n  determineCardType,\n  isValidCardNumber,\n  isValidExpiryMonth,\n  isValidExpiryYear,\n  doesNumberMatchType,\n  doesCvvMatchType,\n  isExpired,\n  luhn,\n  sanitizeNumberString,\n  defaults,\n  reset\n};\n"}